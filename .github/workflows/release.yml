# .github/workflows/release.yml
name: 🚀 Release & Deploy

on:
  push:
    tags:
      - 'v*.*.*'
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v0.1.0)'
        required: true
        type: string

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ================================
  # RELEASE VALIDATION
  # ================================
  validate:
    name: 🔍 Validate Release
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
      
    steps:
      - name: 📦 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📋 Extract Version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          echo "version=${VERSION#v}" >> $GITHUB_OUTPUT
          echo "tag=${VERSION}" >> $GITHUB_OUTPUT
          echo "Release version: ${VERSION}"

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install Dependencies
        run: npm ci

      - name: 🔨 Build & Test
        run: |
          npm run build
          npm test
          npm run test:strategies
          npm run test:cognitive

      - name: 📋 Validate Package.json Version
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          if [[ "v$PACKAGE_VERSION" != "${{ steps.version.outputs.tag }}" ]]; then
            echo "❌ Version mismatch: package.json($PACKAGE_VERSION) != tag(${{ steps.version.outputs.tag }})"
            exit 1
          fi
          echo "✅ Version validation passed"

  # ================================
  # NPM PACKAGE PUBLISHING
  # ================================
  npm-publish:
    name: 📦 Publish to NPM
    runs-on: ubuntu-latest
    needs: validate
    environment: npm-registry
    
    steps:
      - name: 📦 Checkout Repository
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'

      - name: 📥 Install Dependencies
        run: npm ci

      - name: 🔨 Build Package
        run: |
          npm run build
          npm pack --dry-run

      - name: 🔍 Pre-publish Validation
        run: |
          npm run lint
          npm run type-check || true
          npm audit --audit-level=high

      - name: 📤 Publish to NPM
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: 📊 Package Info
        run: |
          echo "Package published successfully!"
          npm info @modelcontextprotocol/metacognition@${{ needs.validate.outputs.version }}

  # ================================
  # DOCKER RELEASE BUILD
  # ================================
  docker-release:
    name: 🐳 Docker Release Build
    runs-on: ubuntu-latest
    needs: validate
    environment: container-registry
    
    steps:
      - name: 📦 Checkout Repository
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔑 Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔑 Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: 📝 Extract Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
            docker.io/arcmoonstudios/metacognition